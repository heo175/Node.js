모듈이 될 파일은
module.exports = 값;
을 마지막에 붙여주세요.

변수뿐만 아니라, 함수 등도 다 가능

모듈은 여러 번 재사용 가능

module.exports === exports
exports는 객체 속성만 담을 수 있음

속성이 있는 것이 아니기 때문에
exports.checkOddOrEven = checkOddOrEven; 이렇게 못씀
(checkOddOrEven은 함수)

불러오기
const 변수 = require('파일 경로');

const checkNumber = require('./func'); // checkOddOrEven 을 변수명을 바꿔서 사용


<global>
노드의 전역 객체는 global

전역 객체이기 때문에 파일 간 global이 공유 가능

<console>
console 객체 안에 디버깅을 도와주는 많은 메서드가 있음

console.time('인자')
console.timeEnd('인자')
인자가 같아야 그 사이의 시간을 잴 수 있음

console.dir은 객체를 로깅하기 좋음

console.trace()로 호출 스택을 추적할 수 있음

<timer>
setTimeout, setInterval로 설정
clearTimeout, clearInterval로 해제

setImmediate
즉시 실행되는 setImmediate 함수를 이벤트 루프로 보낼 때 사용

process 객체에는 현재 실행중인 노드 프로그램 정보가 들어있음

---------------------------------------------------------------------------------------

<os>

운영체제와 관련된 모듈

os.uptime : 운영체제가 시작되고 나서 흐른 시간

<path>

path.sep 경로 구분자
windows(\\), POSIX(/)
path.delimiter 환경 변수 구분자
windows(;), POSIX(:)

path.join 절대 경로 무시하고 합침 (절대 경로를 상대 경로로 여김)
path.resolve 절대 경로 고려하고 합침

루트는 C:\(윈도에서)

<url>

기존 방식 url.parse
호스트가 없을 때도 사용 가능

새방식 url.URL (WHATWG)
search 처리가 편함 (url에서 ? 뒷 부분 )

노드 searchParams 메서드는 FormData나 URLSearchParams 객체에도 비슷하게 쓰임

같은 도메인 상에서는 도메인을 생략할 수 있는데, 이 때에는 WHATWG는 사용할 수 없고 url.parse만 사용가능

<crypto 단방향 암호화 (해시)>

비밀번호는 hash 방식으로 암호화해 복호화되지 않는 문자열을 만듦

암호문(해시)을 저장한 후 사용자의 입력 비밀번호를 암호화한 것과 비교

암호화만 하고 복호화하지 않기 때문에 단방향이라고 하는 것

해시 충돌 공격을 어렵게 하기 위해 salt라는 문자열을 원래 비밀번호에 추가하고 iteration 횟수를 높임

salt는 암호화된 비밀번호와 같이 저장하고, ieration은 1초 정도가 걸릴때까지 올려주면 좋음

<crypto 양방향 암호화>

createCipher
utf8 평문을 base64 암호문으로

createDecipher
base64 암호문을 utf8 평문으로

-----------------------------------

<util>

deprecated는 지원이 조만간 중단될 메서드임을 알려줄 때 사용

<fs 모듈>

비동기를 동기로 하는 방법
1. 콜백에 콜백에 콜백에.. 콜백 안에 넣기 (콜백헬을 극복하기 위해서는 프로미스 쓰기)
fs.writeFile((err, data) => {});
2. readFileSync
const data = fs.writeFileSync();
fs 메서드들은 뒤에 Sync를 붙이면 동기식으로 작동

Sync 메서드 써도 되는 경우
1. 데스크탑 프로그램
2. 한 번만 실행되는 경우

다른 경우에는 그냥 readFile 쓰는 게 좋음

<버퍼와 스트림>

버퍼가 계속 이어지면 스트림

데이터를 조각조각 떼서 버퍼로 만듦(버퍼링). 버퍼가 차면 버퍼를 옮김(스트리밍).

이미지 업로드, 파일 업로드에 사용

스트림은 이벤트 기반으로 동작.
data, end, error...
버퍼(청크)들이 들어올 때마다 data 이벤트가 발생

스트림은 버퍼의 흐름이기 때문에 여러 개의 스트림을 이어 버퍼가 흘러가게 할 수 있습니다.

<기타 fs 메서드>

fs.access('파일경로', 권한)
권한은 F_OK(존재 여부)
R_OK(읽기여부)
W_OK(쓰기 여부)

모든 메서드 뒤에 Sync를 붙이면 동기로 작동

<event>

미리 이벤트리스너를 만들어두고,
(이벤트 리스너는 특정 이벤트가 발생했을 때 어떤 동작을 할지 정의하는 부분)

예시) 사람들이 서버에 방분(이벤트)하면 HTML 파일을 주는 것

on과 addEventListener는 이름만 다르고 기능은 같음
 
<예외 처리>

try catch는 권장하진 않음 -> 아예 에러가 나는 상황을 없게 하는게 좋음
하지만 async/await처럼 어쩔 수없이 쓰는 경우도 있음

uncaughtException : 처리하지 않은 예외를 한 번에 모아서 처리해줌
의존하지 말고 근본적인 에러의 원인을 해결해야함


