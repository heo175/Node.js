ES 는 표준, JavaScript 구현

<const, let>

const, let은 블럭 안을 빠져나갈 수 없음

if (true) {
 var x = 3;
}
console.log(x)

결과 : 3

if (true) {
 const y = 3;
}
console.log(y)

결과 : 에러

var는 값 재할당 가능 (variable) 변수
const는 값 재할당 불가 (constant) 상수
let은 값 재할당 가능

const를 기본으로 하되 값을 바꿀 일이 생기면 let으로 바꾸기
const는 선언 시부터 값을 할당해야함
const : 값을 바꾸지 않도록 하는 안전장치
let : 값을 바꾸는 변수

const에 객체가 할당된 경우 객체 내부 속성은 바꿀 수 있음
const g = { a:1, b:2, c:3 };
객체인 g 자체를 바꿀 수는 없지만 g 안의 값을 바꿀 수 있음
g.a = 5 이런식으로 

상수긴 한데 메모리 주소에 대한 상수, 참조에 대한 상수

<템플릿 문자열>

백틱 : `
템플릿 문자열에서 변수는 ${변수}로 표시
const d = a + ' ' + b + ' ' + c;
const d = `${a} ${b} ${c}`;
둘이 같은 것

백틱을 쓰면 작은따옴표, 큰따옴표 자유롭게 쓸 수 있음

<객체 리터럴의 변화>
객체 리터럴 : { }

sayJS : function(){} 을 - 옛날 문법
sayJS(){} 로 표시하게 됨 - 최신 문법

키랑 값(변수)이 같은 경우
{ data: data, hello: hello } 를
{ data, hello } 로 표시

변수가 들어간 키를 대입하는 경우 - 동적으로 객체 변경
예전 문법에서는 속성을 따로 추가해줘야했는데
최신 문법에서는 동적 속성 할당을 리터럴 안에 표현 가능
{ [변수]: 값 }


<화살표 함수>

function(매개) { return 리턴 }
이렇게 바뀜
(매개) => { return 리턴 }

함수 선언문
function add1(x, y) {
 return x + y;
}

함수 표현식
const add2 = function add1(x, y) {
 return x + y;
}

const add2 = (x, y) => {
 return x + y;
}

함수의 내용이 리턴만 있는 경우
const add2 = (x, y) => x + y;
이렇게 줄일 수 있음

(매개) => 리턴
(매개) => (리턴)

fuction과 화살표 함수의 가장 큰 차이 : 내부 this 동작

function 내부의 this는 외부 this와 다르기 때문에 this를 that에 저장해서 써야함
var relationship1 = {
 name : 'zero',
 friends : ['nero', 'here'],
 logFriends: funtion() {
  var that = this;
  this.friends.forEach(funtion(friend){
   console.log(that.name, friend);
  });
 }
}

화살표 함수는 함수 내부의 this를 외부 this와 같게 만들어줌
var relationship2 = {
 name : 'zero',
 friends : ['nero', 'here'],
 logFriends() {
  this.friends.forEach(friend => {
   console.log(this.name, friend);
  });
 }
}


<비구조화 할당(destructuring)>

객체 비구조화 할당

var candyMachine = {
 status: {
  name: 'node',
  count: 5,
 },
 getCandy() {
  this.status.count--;
  return this.status.count;
 }
}

var status = candyMachine.status;
var getCandy = candyMachine.getCandy;
변수와 속성이 같을 때
const { status, getCandy } = candyMachine;
로 바꿀 수 있음

const a = 객체.a
const b = 객체.b
를 
const {a, b} = 객체
로 바꿀 수 있음

비구조화 할당 시 this가 의도와 다르게 동작하는 현상이 있을 수 있음
candyMachine.getCandy() 
candyMachine이 this가 됨

getCandy()
this가 뭔지 알 수 없음


배열에서의 비구조화 할당

var array = ['nodejs', {}, 10, true];
var node = array[0];
var obj = array[1];
var bool = array[array.length - 1];
를
const array = ['nodejs', {}, 10, true];
const [node, obj, , bool] = array;
로 바꿀 수 있음

배열에서의 비구조화 할당
const a = array[0];
const b = array[1];
을
const [a,b] = array;
로 바꿀 수 있음


<rest 문법>

(...변수)는 rest로 여러 개의 변수를 모아서 배열로 만듦
const array = ['nodejs', {}, 10, true];
const [node, obj, ...bool] = array;

const m = (x, y) => console.log(x, y);
m(5, 6)

m(5, 6, 7, 8, 9)
: 7, 8, 9는 무시됨

const n = (x, ...y) => console.log(x, y);
n(5, 6, 7, 8, 9)
: 6, 7, 8, 9가 y에 들어감

const p = (...rest) => console.log(rest);
p(5,6,7,8,9);

rest 는 배열. arguments는 배열이 아님.

<객체 참조>

const x = { a: 1, b: 2 };
let y = x;
y가 x를 참조하고 있음
참조 : y가 x 변수가 위치한 메모리를 손으로 찍고 있다.
객체 자체는 못 바꾸지만, 객체 안 속성은 바꿀 수 있다.


<콜백과 프로미스(Promise) 비교>

노드의 API들이 Promise 기반으로 재편되고 있어 더욱 중요

콜백 안에 콜백 안에 콜백.. 콜백지옥
Users.findOne('zero', (err, user) => {
 if(err) {
  return console.error(err);
 }
 console.log(user);
 Users.update('zero', 'nero', (err, updateUser) => {
  if(err) {
   return console.error(err);
  } 
  console.log(updateUser);
   Users.remove('zero', 'nero', (err, removeUser) => {
     if(err) {
      return console.error(err);
     } 
    console.log(removeUser);
  });
 });
});
console.log('다찾았니?');

프로미스로 바꾼 코드
Users.findOne('zero')
 .then((user) => {
  console.log(user);
  return Users.update('zero', 'nero');
};
 .then((updateUser) => {
  console.log(updateUser);
  return Users.remove('nero');
};
 .then((removeUser) => {
  console.log(removeUser);
});
 .catch((err) => {
  console.error(err);
});
console.log('다찾았니?');

일정 깊이를 유지

<프로미스 이해하기>

프로미스 형식
new Promise((resolve, reject) => {

});

resolve : 성공 메시지
reject : 실패 메시지

예시
const plus = new Promise((resolve, reject) => {
 const a=1;
 const b=2;

 if(a+b>2){
  resolve(a+b);
 }else{
  reject(a+b);
 }
});

plus
 .then((success) => {

})
 .catch((fail) => {

})

resolve(msg) -> then((msg)
reject(err) -> catch((err

Promise를 지원하는 메서드는 내부적으로 지원해주기 때문에 사용 가능
그렇지않으면 then, catch 못 씀

then에 리턴 값이 있으면 다음 then으로 넘어감
Promise를 리턴하면 resolve나 reject 되어 넘어감

무조건 성공하는 프로미스
const successPromise = Promise.resolve('성공');
const failPromise = Promise.reject('실패');

Promise.all 로 여러 프로미스를 동시 실행 가능
단, 하나라도 실패하면 catch로
Promise.all([Users.findOne(), Users.remove(), Users.update()])
 .then((results) => {})
 .catch((error) => {})

Promise는 결과값을 가지고 있지만 .then이나 .catch 를 붙이기 전까지 반환하지 않는 것

콜백은 가져오는 부분과 사용하는 부분이 합쳐져있지만 (바로 이어지지만)
프로미스는 나눠져있으며 사용하는 부분을 따로 할 수 있다

콜백
User.findOne('zero', (err, user) => {
 console.log(user);
});

프로미스
const zero = Users.findOne('zero');

// 다른 코드
// 다른 코드

zero.then((z) => {
 console.log(z);
});

<async/awiat>
async () => {
 const 변수 = await 값
}

async/awiat로 바꾼 코드
async func() => {
 const user = await Users.findOne('zero');
 const updateUser = await Users.update('zero', 'nero');
 const removeUser = await Users.remove('nero');
 console.log('다찾았니?');
}
func()

async/await도 Promise 기반이므로 Promise를 먼저 알아야함
동기식으로 보이기 때문에 코드 순서와 실행 순서가 같음
then으로 넘어간 줄을 한 줄로 만든다고 생각하기

에러 처리를 위해 await을 try catch문으로 감싸기
async func() => {
try {
  const user = await Users.findOne('zero');
  const updateUser = await Users.update('zero', 'nero');
  const removeUser = await Users.remove('nero');
  console.log('다찾았니?');
 } catch(err) {
 console.error(err);
 }
}
func()
